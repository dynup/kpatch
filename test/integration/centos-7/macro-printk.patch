diff -Nupr src.orig/net/ipv4/fib_frontend.c src/net/ipv4/fib_frontend.c
--- src.orig/net/ipv4/fib_frontend.c	2017-09-22 16:52:10.646110299 -0400
+++ src/net/ipv4/fib_frontend.c	2017-09-22 16:55:14.395870305 -0400
@@ -633,6 +633,7 @@ errout:
 	return err;
 }
 
+#include "kpatch-macros.h"
 static int inet_rtm_newroute(struct sk_buff *skb, struct nlmsghdr *nlh)
 {
 	struct net *net = sock_net(skb->sk);
@@ -651,6 +652,7 @@ static int inet_rtm_newroute(struct sk_b
 	}
 
 	err = fib_table_insert(net, tb, &cfg);
+	KPATCH_PRINTK("[inet_rtm_newroute]: err is %d\n", err);
 errout:
 	return err;
 }
diff -Nupr src.orig/net/ipv4/fib_semantics.c src/net/ipv4/fib_semantics.c
--- src.orig/net/ipv4/fib_semantics.c	2017-09-22 16:52:10.645110295 -0400
+++ src/net/ipv4/fib_semantics.c	2017-09-22 16:54:05.175584004 -0400
@@ -925,6 +925,7 @@ fib_convert_metrics(struct fib_info *fi,
 	return 0;
 }
 
+#include "kpatch-macros.h"
 struct fib_info *fib_create_info(struct fib_config *cfg)
 {
 	int err;
@@ -949,6 +950,7 @@ struct fib_info *fib_create_info(struct
 #endif
 
 	err = -ENOBUFS;
+	KPATCH_PRINTK("[fib_create_info]: create error err is %d\n",err);
 	if (fib_info_cnt >= fib_info_hash_size) {
 		unsigned int new_size = fib_info_hash_size << 1;
 		struct hlist_head *new_info_hash;
@@ -969,6 +971,7 @@ struct fib_info *fib_create_info(struct
 		if (!fib_info_hash_size)
 			goto failure;
 	}
+	KPATCH_PRINTK("[fib_create_info]: 2 create error err is %d\n",err);
 
 	fi = kzalloc(sizeof(*fi)+nhs*sizeof(struct fib_nh), GFP_KERNEL);
 	if (fi == NULL)
@@ -980,6 +983,7 @@ struct fib_info *fib_create_info(struct
 	} else
 		fi->fib_metrics = (u32 *) dst_default_metrics;
 	fib_info_cnt++;
+	KPATCH_PRINTK("[fib_create_info]: 3 create error err is %d\n",err);
 
 	fi->fib_net = net;
 	fi->fib_protocol = cfg->fc_protocol;
@@ -996,8 +1000,10 @@ struct fib_info *fib_create_info(struct
 		if (!nexthop_nh->nh_pcpu_rth_output)
 			goto failure;
 	} endfor_nexthops(fi)
+	KPATCH_PRINTK("[fib_create_info]: 4 create error err is %d\n",err);
 
 	err = fib_convert_metrics(fi, cfg);
+	KPATCH_PRINTK("[fib_create_info]: 5 create error err is %d\n",err);
 	if (err)
 		goto failure;
 
@@ -1048,6 +1054,7 @@ struct fib_info *fib_create_info(struct
 		nh->nh_weight = 1;
 #endif
 	}
+	KPATCH_PRINTK("[fib_create_info]: 6 create error err is %d\n",err);
 
 	if (fib_props[cfg->fc_type].error) {
 		if (cfg->fc_gw || cfg->fc_oif || cfg->fc_mp)
@@ -1065,6 +1072,7 @@ struct fib_info *fib_create_info(struct
 			goto err_inval;
 		}
 	}
+	KPATCH_PRINTK("[fib_create_info]: 7 create error err is %d\n",err);
 
 	if (cfg->fc_scope > RT_SCOPE_HOST)
 		goto err_inval;
@@ -1087,6 +1095,7 @@ struct fib_info *fib_create_info(struct
 				goto failure;
 		} endfor_nexthops(fi)
 	}
+	KPATCH_PRINTK("[fib_create_info]: 8 create error err is %d\n",err);
 
 	if (fi->fib_prefsrc) {
 		if (cfg->fc_type != RTN_LOCAL || !cfg->fc_dst ||
@@ -1099,6 +1108,7 @@ struct fib_info *fib_create_info(struct
 		fib_info_update_nh_saddr(net, nexthop_nh);
 		fib_add_weight(fi, nexthop_nh);
 	} endfor_nexthops(fi)
+	KPATCH_PRINTK("[fib_create_info]: 9 create error err is %d\n",err);
 
 	fib_rebalance(fi);
 
@@ -1110,6 +1120,7 @@ link_it:
 		ofi->fib_treeref++;
 		return ofi;
 	}
+	KPATCH_PRINTK("[fib_create_info]: 10 create error err is %d\n",err);
 
 	fi->fib_treeref++;
 	atomic_inc(&fi->fib_clntref);
@@ -1133,6 +1144,7 @@ link_it:
 		hlist_add_head(&nexthop_nh->nh_hash, head);
 	} endfor_nexthops(fi)
 	spin_unlock_bh(&fib_info_lock);
+	KPATCH_PRINTK("[fib_create_info]: 11 create error err is %d\n",err);
 	return fi;
 
 err_inval:
@@ -1143,6 +1155,7 @@ failure:
 		fi->fib_dead = 1;
 		free_fib_info(fi);
 	}
+	KPATCH_PRINTK("[fib_create_info]: 12 create error err is %d\n",err);
 
 	return ERR_PTR(err);
 }
diff -Nupr src.orig/net/ipv4/fib_trie.c src/net/ipv4/fib_trie.c
--- src.orig/net/ipv4/fib_trie.c	2017-09-22 16:52:10.645110295 -0400
+++ src/net/ipv4/fib_trie.c	2017-09-22 16:55:39.940975963 -0400
@@ -1191,6 +1191,7 @@ static int fib_insert_alias(struct trie
 }
 
 /* Caller must hold RTNL. */
+#include "kpatch-macros.h"
 int fib_table_insert(struct net *net, struct fib_table *tb,
 		     struct fib_config *cfg)
 {
@@ -1216,11 +1217,14 @@ int fib_table_insert(struct net *net, st
 	if ((plen < KEYLENGTH) && (key << plen))
 		return -EINVAL;
 
+	KPATCH_PRINTK("[fib_table_insert]: start\n");
 	fi = fib_create_info(cfg);
 	if (IS_ERR(fi)) {
 		err = PTR_ERR(fi);
+		KPATCH_PRINTK("[fib_table_insert]: create error err is %d\n",err);
 		goto err;
 	}
+	KPATCH_PRINTK("[fib_table_insert]: cross\n");
 
 	l = fib_find_node(t, &tp, key);
 	fa = l ? fib_find_alias(&l->leaf, slen, tos, fi->fib_priority) : NULL;
