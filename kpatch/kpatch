#!/bin/bash
#
# kpatch hot patch module management script
#
# Copyright (C) 2014 Seth Jennings <sjenning@redhat.com>
# Copyright (C) 2014 Josh Poimboeuf <jpoimboe@redhat.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
# 02110-1301, USA.

# This is the primary kpatch user script that manages building, applying, and
# displaying information about kernel patch modules installed on the system.

# TODO: add kernelrelease option to manage releases other than the
# currently running one

KERNELRELEASE="$(uname -r)"
SYSDIR="/usr/lib/kpatch/$KERNELRELEASE"
USERDIR="/var/lib/kpatch/$KERNELRELEASE"
ENABLEDDIR="$USERDIR/enabled"

usage () {
	echo "usage: kpatch <command> [<args>]" >&2
	echo >&2
	echo "Valid commands:" >&2
	printf '   %-20s %s\n' "build <file>"         "build hotpatch module from source diff patch file" >&2
	echo >&2
	printf '   %-20s %s\n' "install <file>"       "install hotpatch module to the kpatch DB" >&2
	printf '   %-20s %s\n' "uninstall <hotpatch>" "uninstall hotpatch module from the kpatch DB" >&2
	echo >&2
	printf '   %-20s %s\n' "apply --all"          "apply all enabled hotpatch modules to the running kernel" >&2
	printf '   %-20s %s\n' "apply <hotpatch>"     "apply installed hotpatch module to the running kernel" >&2
	printf '   %-20s %s\n' "remove <hotpatch>"    "remove hotpatch module from the running kernel" >&2
	echo >&2
	printf '   %-20s %s\n' "enable <hotpatch>"    "automatically apply hotpatch module during boot" >&2
	printf '   %-20s %s\n' "disable <hotpatch>"   "don't automatically apply hotpatch module during boot" >&2
	echo >&2
	printf '   %-20s %s\n' "info <hotpatch>"      "show information about an installed hotpatch module" >&2
	echo >&2
	printf '   %-20s %s\n' "list"                 "list installed hotpatch modules" >&2
	exit 1
}

warn() {
	echo "kpatch: $@" >&2
}

die() {
	warn "$@"
	exit 1
}

__find_module () {
	MODULE="$USERDIR/$1"
	[[ -f "$MODULE" ]] && return

	MODULE="$SYSDIR/$1"
	[[ -f "$MODULE" ]] && return

	return 1
}

find_module () {
	arg="$1"
	__find_module "${arg}"
}

load_module () {
	/usr/sbin/insmod "$1"
}

unload_module () {
	/usr/sbin/rmmod "$(basename $1)"
}

module_enabled() {
	[[ -e "$ENABLEDDIR/$(basename $1)" ]]
}

echo_patch_name() {
	NAME="$(basename $1)"
	echo $NAME
}

find_kpatch_build() {
	SCRIPTDIR="$(readlink -f $(dirname $0))"

	# git repo
	KPATCHBUILD="$(readlink -f $SCRIPTDIR/../kpatch-build/kpatch-build)"
	[[ -e "$KPATCHBUILD" ]] && return

	# installation path
	KPATCHBUILD="$(readlink -f $SCRIPTDIR/../libexec/kpatch/kpatch-build)"
	[[ -e "$KPATCHBUILD" ]] && return

	return 1
}

unset MODULE
[[ "$#" -gt 2 ]] || [[ "$#" -lt 1 ]] && usage
case "$1" in
"enable")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	module_enabled $MODULE && die "$PATCH is already enabled"
	mkdir -p $ENABLEDDIR
	ln -s "$MODULE" "$ENABLEDDIR" || die "failed to enable patch $PATCH"
	;;

"disable")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	module_enabled $MODULE || die "$PATCH is already disabled"
	rm -f "$ENABLEDDIR/$(basename $MODULE)" || die "failed to disable patch $PATCH"
	;;

"apply")
	[[ "$#" -ne 2 ]] && usage
	case "$2" in
	"--all")
		for i in "$ENABLEDDIR"/*.ko; do
			[[ -e "$i" ]] || continue
			load_module "$i" || die "failed to load module $i"
		done
		;;
	*)
		PATCH="$2"
		find_module "$PATCH" || die "$PATCH is not installed"
		load_module "$MODULE" || die "failed to load patch $PATCH"
		;;
	esac
	;;

"remove")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	unload_module "$MODULE" || die "failed to unload patch $PATCH"
	;;

"install")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	[[ -e "$PATCH" ]] || die "$PATCH doesn't exist"
	[[ ${PATCH: -3} == ".ko" ]] || "$PATCH isn't a .ko file"
	cp -f "$PATCH" "$USERDIR" || die "failed to install patch $PATCH"
	;;

"uninstall")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	rm -f "$USERDIR/$(basename $MODULE)" || die "failed to uninstall patch $PATCH"
	;;

"list")
	[[ "$#" -ne 1 ]] && usage
	echo "System installed patches:"
	for i in "$SYSDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	echo "User installed patches:"
	for i in "$USERDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	echo "Enabled patches:"
	for i in "$ENABLEDDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	;;

"info")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"
	echo "Patch information for $PATCH:"
	/usr/sbin/modinfo "$MODULE" || die "failed to get info for patch $PATCH"
	;;

"build")
	find_kpatch_build || die "kpatch-build is not installed"
	shift
	"$KPATCHBUILD" "$@" || die "kpatch build failed"
	;;

"help"|"-h"|"--help")
	usage
	;;

*)
	echo "subcommand $1 not recognized"
	usage
	;;
esac
