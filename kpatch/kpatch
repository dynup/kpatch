#!/bin/bash
#
# kpatch hot patch module management script
#
# Copyright (C) 2014 Seth Jennings <sjenning@redhat.com>
# Copyright (C) 2014 Josh Poimboeuf <jpoimboe@redhat.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
# 02110-1301, USA.

# This is the kpatch user script that manages installing, loading, and
# displaying information about kernel patch modules installed on the system.

KERNELRELEASE="$(uname -r)"
SYSDIR="/usr/lib/kpatch/$KERNELRELEASE"
USERDIR="/var/lib/kpatch/$KERNELRELEASE"
SCRIPTDIR="$(readlink -f $(dirname $(type -p $0)))"
PATCH_PATH=""

usage_cmd() {
	printf '   %-20s\n      %s\n' "$1" "$2" >&2
}

usage () {
	# ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
	# When changing this, please also update the man page.  Thanks!
	echo "usage: kpatch <command> [<args>]" >&2
	echo >&2
	echo "Valid commands:" >&2
	usage_cmd "install <module>" "install patch module to the initrd to be loaded at boot"
	usage_cmd "uninstall <module>" "uninstall patch module from the initrd"
	echo >&2
	usage_cmd "load --all" "load all installed patch modules into the running kernel"
	usage_cmd "load <module>" "load patch module into the running kernel"
	usage_cmd "replace <module>" "load patch module into the running kernel, replacing all other modules"
	usage_cmd "unload <module>" "unload patch module from the running kernel"
	echo >&2
	usage_cmd "info <module>" "show information about a patch module"
	echo >&2
	usage_cmd "list" "list installed patch modules"
	exit 1
}

warn() {
	echo "kpatch: $@" >&2
}

die() {
	warn "$@"
	exit 1
}

__find_module () {
	MODULE="$1"
	[[ -f "$MODULE" ]] && return

	MODULE="$USERDIR/$1"
	[[ -f "$MODULE" ]] && PATCH_PATH=$MODULE && return

	MODULE="$SYSDIR/$1"
	[[ -f "$MODULE" ]] && PATCH_PATH=$MODULE && return

	return 1
}

find_module () {
	arg="$1"
	__find_module "${arg}"
}

find_core_module() {
	COREMOD="$SCRIPTDIR"/../kmod/core/kpatch.ko
	[[ -f "$COREMOD" ]] && return

	COREMOD="/usr/local/lib/modules/$(uname -r)/extra/kpatch/kpatch.ko"
	[[ -f "$COREMOD" ]] && return

	COREMOD="/usr/lib/modules/$(uname -r)/extra/kpatch/kpatch.ko"
	[[ -f "$COREMOD" ]] && return

	return 1
}

core_module_loaded () {
	grep -q "T kpatch_register" /proc/kallsyms
}

load_module () {
	if ! core_module_loaded; then
		if modprobe -q kpatch; then
			echo "loaded core module"
		else
			find_core_module || die "can't find core module"
			echo "loading core module: $COREMOD"
			/usr/sbin/insmod "$COREMOD" || die "failed to load core module"
		fi
	fi
	echo "loading patch module: $1"
	/usr/sbin/insmod "$1" "$2"
}

unload_module () {
	# strip leading path, .ko suffix and convert '-' to '_' so we can find
	# the module name in sysfs
	PATCH="$(basename $1)"
	PATCH="${PATCH%.ko}"
	PATCH="${PATCH//-/_}"

	ENABLED=/sys/kernel/kpatch/patches/"$PATCH"/enabled

	if [[ -e "$ENABLED" ]] && [[ $(cat "$ENABLED") -eq 1 ]]; then
		echo "disabling patch module: $PATCH"
		echo 0 > $ENABLED || die "can't disable $PATCH"
	fi

	echo "unloading patch module: $PATCH"
	/usr/sbin/rmmod "$(basename $1)"
}

unload_disabled_modules() {
	for module in /sys/kernel/kpatch/patches/*; do
		if [[ $(cat $module/enabled) -eq 0 ]]; then
			unload_module $module || die "failed to unload $module"
		fi
	done
}

echo_patch_name() {
	NAME="$(basename $1)"
	echo $NAME
}

unset MODULE
[[ "$#" -gt 2 ]] || [[ "$#" -lt 1 ]] && usage
case "$1" in
"load")
	[[ "$#" -ne 2 ]] && usage
	case "$2" in
	"--all")
		for i in "$SYSDIR"/*.ko; do
			[[ -e "$i" ]] || continue
			load_module "$i" || die "failed to load module $i"
		done
		for i in "$USERDIR"/*.ko; do
			[[ -e "$i" ]] || continue
			load_module "$i" || die "failed to load module $i"
		done
		;;
	*)
		PATCH="$2"
		find_module "$PATCH" || die "can't find $PATCH"
		load_module "$MODULE" || die "failed to load patch $PATCH"
		;;
	esac
	;;

"replace")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "can't find $PATCH"
	load_module "$MODULE" replace=1 || die "failed to load patch $PATCH"
	unload_disabled_modules || die "failed to unload old modules"
	;;

"unload")
	[[ "$#" -ne 2 ]] && usage
	unload_module "$2" || die "failed to unload patch $2"
	;;

"install")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	[[ -e "$PATCH" ]] || die "$PATCH doesn't exist"
	[[ ${PATCH: -3} == ".ko" ]] || die "$PATCH isn't a .ko file"

	echo "installing $PATCH to $USERDIR"
	mkdir -p "$USERDIR" || die "failed to create install directory"
	cp -f "$PATCH" "$USERDIR" || die "failed to install patch $PATCH"

	echo "installing $PATCH to initramfs"
	dracut -f || die "dracut failed"
	;;

"uninstall")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "$PATCH is not installed"

	echo "uninstalling $PATCH from $PATCH_PATH"
	rm -f "$PATCH_PATH" || die "failed to uninstall patch $PATCH"

	echo "uninstalling $PATCH from initramfs"
	dracut -f || die "dracut failed"
	;;

"list")
	[[ "$#" -ne 1 ]] && usage
	echo "Loaded patch modules:"
	for module in /sys/kernel/kpatch/patches/*; do
		if [[ -e $module ]] && [[ $(cat $module/enabled) -eq 1 ]]; then
			echo_patch_name $module
		fi
	done
	echo ""
	echo "System installed patch modules:"
	for i in "$SYSDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	echo ""
	echo "User installed patch modules:"
	for i in "$USERDIR"/*.ko; do
		[[ -e "$i" ]] || continue
		echo_patch_name $i
	done
	;;

"info")
	[[ "$#" -ne 2 ]] && usage
	PATCH="$2"
	find_module "$PATCH" || die "can't find $PATCH"
	echo "Patch information for $PATCH:"
	/usr/sbin/modinfo "$MODULE" || die "failed to get info for patch $PATCH"
	;;

"help"|"-h"|"--help")
	usage
	;;

*)
	echo "subcommand $1 not recognized"
	usage
	;;
esac
